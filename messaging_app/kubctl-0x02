#!/bin/bash

# kubctl-0x02 - Task 4: Blue-Green Deployment Strategy

echo "=== Blue-Green Deployment Strategy Implementation ==="

# Colors for output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check deployment status
check_deployment_status() {
    local deployment_name=$1
    local timeout=300
    
    echo "Checking status of deployment: $deployment_name"
    kubectl rollout status deployment/$deployment_name --timeout=${timeout}s
    
    if [ $? -eq 0 ]; then
        echo "✓ Deployment $deployment_name is ready"
        return 0
    else
        echo "✗ Deployment $deployment_name failed or timed out"
        return 1
    fi
}

# Function to check pod health
check_pod_health() {
    local version=$1
    echo "Checking pod health for version: $version"
    
    pods=$(kubectl get pods -l app=django-messaging-app,version=$version -o jsonpath='{.items[*].metadata.name}')
    
    for pod in $pods; do
        echo "Checking logs for pod: $pod"
        kubectl logs $pod --tail=20
        
        # Check if pod is ready
        ready=$(kubectl get pod $pod -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        if [ "$ready" = "True" ]; then
            echo "✓ Pod $pod is ready"
        else
            echo "✗ Pod $pod is not ready"
            return 1
        fi
    done
    
    return 0
}

# Function to switch traffic
switch_traffic() {
    local target_version=$1
    echo -e "${YELLOW}Switching traffic to $target_version version...${NC}"
    
    # Update main service selector
    kubectl patch service django-messaging-service -p '{"spec":{"selector":{"app":"django-messaging-app","version":"'$target_version'"}}}'
    
    # Update external service selector
    kubectl patch service django-messaging-external -p '{"spec":{"selector":{"app":"django-messaging-app","version":"'$target_version'"}}}'
    
    # Update nodeport service selector
    kubectl patch service django-messaging-nodeport -p '{"spec":{"selector":{"app":"django-messaging-app","version":"'$target_version'"}}}'
    
    # Update ConfigMap
    kubectl patch configmap blue-green-config -p '{"data":{"active-version":"'$target_version'","switch-timestamp":"'$(date)'"}}'
    
    echo "✓ Traffic switched to $target_version"
}

# Get current active version
current_version=$(kubectl get configmap blue-green-config -o jsonpath='{.data.active-version}' 2>/dev/null || echo "none")
echo "Current active version: $current_version"

# Step 1: Deploy Blue Version
echo -e "${BLUE}=== Step 1: Deploying Blue Version ===${NC}"
kubectl apply -f blue_deployment.yaml

if [ $? -eq 0 ]; then
    echo "✓ Blue deployment applied successfully"
else
    echo "✗ Failed to apply blue deployment"
    exit 1
fi

# Wait for blue deployment to be ready
check_deployment_status "django-messaging-app-blue"
if [ $? -ne 0 ]; then
    echo "Blue deployment failed, exiting..."
    exit 1
fi

# Step 2: Deploy Services
echo -e "${YELLOW}=== Step 2: Deploying Services ===${NC}"
kubectl apply -f kubeservice.yaml

# Step 3: Check Blue Version Health
echo -e "${BLUE}=== Step 3: Checking Blue Version Health ===${NC}"
check_pod_health "blue"
if [ $? -ne 0 ]; then
    echo "Blue version health check failed"
    exit 1
fi

# Step 4: Deploy Green Version
echo -e "${GREEN}=== Step 4: Deploying Green Version ===${NC}"
kubectl apply -f green_deployment.yaml

if [ $? -eq 0 ]; then
    echo "✓ Green deployment applied successfully"
else
    echo "✗ Failed to apply green deployment"
    exit 1
fi

# Wait for green deployment to be ready
check_deployment_status "django-messaging-app-green"
if [ $? -ne 0 ]; then
    echo "Green deployment failed, keeping blue active"
    exit 1
fi

# Step 5: Check Green Version Health
echo -e "${GREEN}=== Step 5: Checking Green Version Health ===${NC}"
check_pod_health "green"
if [ $? -ne 0 ]; then
    echo "Green version health check failed, keeping blue active"
    exit 1
fi

# Step 6: Test Green Version Before Switching
echo -e "${GREEN}=== Step 6: Testing Green Version ===${NC}"

# Port forward to green service for testing
kubectl port-forward service/django-messaging-service-green 8081:80 &
GREEN_PORT_FORWARD_PID=$!
sleep 5

# Test green version
echo "Testing green version endpoint..."
green_test=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/admin/ || echo "000")

# Kill green port forward
kill $GREEN_PORT_FORWARD_PID 2>/dev/null

if [ "$green_test" = "200" ] || [ "$green_test" = "302" ]; then
    echo "✓ Green version is responding correctly"
else
    echo "✗ Green version test failed (HTTP: $green_test)"
    echo "Keeping blue version active"
    exit 1
fi

# Step 7: Gradual Traffic Switch (Blue -> Green)
echo -e "${YELLOW}=== Step 7: Switching Traffic from Blue to Green ===${NC}"

# Update ConfigMap to mark green as previous version (for rollback capability)
kubectl patch configmap blue-green-config -p '{"data":{"previous-version":"blue"}}'

# Switch traffic to green
switch_traffic "green"

# Step 8: Verify Traffic Switch
echo -e "${GREEN}=== Step 8: Verifying Traffic Switch ===${NC}"

# Port forward to main service
kubectl port-forward service/django-messaging-service 8080:80 &
MAIN_PORT_FORWARD_PID=$!
sleep 5

# Test main service (should now point to green)
echo "Testing main service (should be green version)..."
for i in {1..5}; do
    echo "Test $i:"
    curl -s http://localhost:8080/admin/ -w "Status: %{http_code}, Time: %{time_total}s\n" -o /dev/null || echo "Request failed"
    sleep 1
done

# Kill main port forward
kill $MAIN_PORT_FORWARD_PID 2>/dev/null

# Step 9: Display Current Status
echo -e "${YELLOW}=== Step 9: Current Deployment Status ===${NC}"

echo "Blue deployment status:"
kubectl get deployment django-messaging-app-blue -o wide

echo ""
echo "Green deployment status:"
kubectl get deployment django-messaging-app-green -o wide

echo ""
echo "All pods:"
kubectl get pods -l app=django-messaging-app -o wide

echo ""
echo "Services:"
kubectl get services -l app=django-messaging-app

echo ""
echo "ConfigMap status:"
kubectl get configmap blue-green-config -o yaml

# Step 10: Provide Rollback Instructions
echo -e "${YELLOW}=== Step 10: Rollback Instructions ===${NC}"
echo "To rollback to blue version, run:"
echo "kubectl patch service django-messaging-service -p '{\"spec\":{\"selector\":{\"app\":\"django-messaging-app\",\"version\":\"blue\"}}}'"
echo "kubectl patch service django-messaging-external -p '{\"spec\":{\"selector\":{\"app\":\"django-messaging-app\",\"version\":\"blue\"}}}'"
echo "kubectl patch service django-messaging-nodeport -p '{\"spec\":{\"selector\":{\"app\":\"django-messaging-app\",\"version\":\"blue\"}}}'"

echo ""
echo -e "${GREEN}=== Blue-Green Deployment Completed Successfully ===${NC}"
echo "Active version: green"
echo "Previous version: blue (available for rollback)"
echo "Access application via: minikube service django-messaging-nodeport --url"